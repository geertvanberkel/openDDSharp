// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.2a_p15
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_codegen.cpp:376


#include "TestPInvokeIdlC.h"
#include "tao/CDR.h"

#if !defined (__ACE_INLINE__)
#include "TestPInvokeIdlC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\sequence_cs.cpp:73

#if !defined (_TEST_LONGLIST_CS_)
#define _TEST_LONGLIST_CS_

Test::LongList::LongList (void)
{}

Test::LongList::LongList (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Long
      > (max)
{}

Test::LongList::LongList (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Long * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Long
      >
    (max, length, buffer, release)
{}

Test::LongList::LongList (
    const LongList &seq)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Long
      > (seq)
{}

Test::LongList::~LongList (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\sequence_cs.cpp:73

#if !defined (_TEST_STRINGLIST_CS_)
#define _TEST_STRINGLIST_CS_

Test::StringList::StringList (void)
{}

Test::StringList::StringList (
    ::CORBA::ULong max)
  : ::TAO::unbounded_basic_string_sequence<char> (max)
{}

Test::StringList::StringList (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Char * * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_basic_string_sequence<char>
    (max, length, buffer, release)
{}

Test::StringList::StringList (
    const StringList &seq)
  : ::TAO::unbounded_basic_string_sequence<char> (seq)
{}

Test::StringList::~StringList (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\sequence_cs.cpp:73

#if !defined (_TEST_WSTRINGLIST_CS_)
#define _TEST_WSTRINGLIST_CS_

Test::WStringList::WStringList (void)
{}

Test::WStringList::WStringList (
    ::CORBA::ULong max)
  : ::TAO::unbounded_basic_string_sequence<CORBA::WChar> (max)
{}

Test::WStringList::WStringList (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::WChar * * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_basic_string_sequence<CORBA::WChar>
    (max, length, buffer, release)
{}

Test::WStringList::WStringList (
    const WStringList &seq)
  : ::TAO::unbounded_basic_string_sequence<CORBA::WChar> (seq)
{}

Test::WStringList::~WStringList (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\sequence_cs.cpp:73

#if !defined (_TEST_STRUCTLIST_CS_)
#define _TEST_STRUCTLIST_CS_

Test::StructList::StructList (void)
{}

Test::StructList::StructList (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        NestedTestStruct
      > (max)
{}

Test::StructList::StructList (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    Test::NestedTestStruct * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        NestedTestStruct
      >
    (max, length, buffer, release)
{}

Test::StructList::StructList (
    const StructList &seq)
  : ::TAO::unbounded_value_sequence<
        NestedTestStruct
      > (seq)
{}

Test::StructList::~StructList (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\array_cs.cpp:97

Test::ArrayLong_slice *
Test::ArrayLong_dup (const Test::ArrayLong_slice *_tao_src_array)
{
  Test::ArrayLong_slice *_tao_dup_array =
    Test::ArrayLong_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <Test::ArrayLong_slice *> (0);
    }
  
  Test::ArrayLong_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

Test::ArrayLong_slice *
Test::ArrayLong_alloc (void)
{
  Test::ArrayLong_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::Long[5], 0);
  return retval;
}

void
Test::ArrayLong_free (
    Test::ArrayLong_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
Test::ArrayLong_copy (
    Test::ArrayLong_slice * _tao_to,
    const Test::ArrayLong_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 5; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\array_cs.cpp:97

Test::ArrayString_slice *
Test::ArrayString_dup (const Test::ArrayString_slice *_tao_src_array)
{
  Test::ArrayString_slice *_tao_dup_array =
    Test::ArrayString_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <Test::ArrayString_slice *> (0);
    }
  
  Test::ArrayString_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

Test::ArrayString_slice *
Test::ArrayString_alloc (void)
{
  Test::ArrayString_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::TAO::String_Manager[10], 0);
  return retval;
}

void
Test::ArrayString_free (
    Test::ArrayString_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
Test::ArrayString_copy (
    Test::ArrayString_slice * _tao_to,
    const Test::ArrayString_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\array_cs.cpp:97

Test::ArrayWString_slice *
Test::ArrayWString_dup (const Test::ArrayWString_slice *_tao_src_array)
{
  Test::ArrayWString_slice *_tao_dup_array =
    Test::ArrayWString_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <Test::ArrayWString_slice *> (0);
    }
  
  Test::ArrayWString_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

Test::ArrayWString_slice *
Test::ArrayWString_alloc (void)
{
  Test::ArrayWString_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::TAO::WString_Manager[4], 0);
  return retval;
}

void
Test::ArrayWString_free (
    Test::ArrayWString_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
Test::ArrayWString_copy (
    Test::ArrayWString_slice * _tao_to,
    const Test::ArrayWString_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 4; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\array_cs.cpp:97

Test::ArrayStruct_slice *
Test::ArrayStruct_dup (const Test::ArrayStruct_slice *_tao_src_array)
{
  Test::ArrayStruct_slice *_tao_dup_array =
    Test::ArrayStruct_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <Test::ArrayStruct_slice *> (0);
    }
  
  Test::ArrayStruct_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

Test::ArrayStruct_slice *
Test::ArrayStruct_alloc (void)
{
  Test::ArrayStruct_slice *retval = 0;
  ACE_NEW_RETURN (retval, Test::NestedTestStruct[5], 0);
  return retval;
}

void
Test::ArrayStruct_free (
    Test::ArrayStruct_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
Test::ArrayStruct_copy (
    Test::ArrayStruct_slice * _tao_to,
    const Test::ArrayStruct_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 5; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\array_cs.cpp:97

Test::MultiArrayLong_slice *
Test::MultiArrayLong_dup (const Test::MultiArrayLong_slice *_tao_src_array)
{
  Test::MultiArrayLong_slice *_tao_dup_array =
    Test::MultiArrayLong_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <Test::MultiArrayLong_slice *> (0);
    }
  
  Test::MultiArrayLong_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

Test::MultiArrayLong_slice *
Test::MultiArrayLong_alloc (void)
{
  Test::MultiArrayLong_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::Long[3][4][2], 0);
  return retval;
}

void
Test::MultiArrayLong_free (
    Test::MultiArrayLong_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
Test::MultiArrayLong_copy (
    Test::MultiArrayLong_slice * _tao_to,
    const Test::MultiArrayLong_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 3; ++i0)
    {
      for ( ::CORBA::ULong i1 = 0; i1 < 4; ++i1)
        {
          for ( ::CORBA::ULong i2 = 0; i2 < 2; ++i2)
            {
              _tao_to[i0][i1][i2] = _tao_from[i0][i1][i2];
            }
        }
    }
}

// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\array_cs.cpp:97

Test::MultiArrayString_slice *
Test::MultiArrayString_dup (const Test::MultiArrayString_slice *_tao_src_array)
{
  Test::MultiArrayString_slice *_tao_dup_array =
    Test::MultiArrayString_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <Test::MultiArrayString_slice *> (0);
    }
  
  Test::MultiArrayString_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

Test::MultiArrayString_slice *
Test::MultiArrayString_alloc (void)
{
  Test::MultiArrayString_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::TAO::String_Manager[3][4][2], 0);
  return retval;
}

void
Test::MultiArrayString_free (
    Test::MultiArrayString_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
Test::MultiArrayString_copy (
    Test::MultiArrayString_slice * _tao_to,
    const Test::MultiArrayString_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 3; ++i0)
    {
      for ( ::CORBA::ULong i1 = 0; i1 < 4; ++i1)
        {
          for ( ::CORBA::ULong i2 = 0; i2 < 2; ++i2)
            {
              _tao_to[i0][i1][i2] = _tao_from[i0][i1][i2];
            }
        }
    }
}

// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\array_cs.cpp:97

Test::MultiArrayWString_slice *
Test::MultiArrayWString_dup (const Test::MultiArrayWString_slice *_tao_src_array)
{
  Test::MultiArrayWString_slice *_tao_dup_array =
    Test::MultiArrayWString_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <Test::MultiArrayWString_slice *> (0);
    }
  
  Test::MultiArrayWString_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

Test::MultiArrayWString_slice *
Test::MultiArrayWString_alloc (void)
{
  Test::MultiArrayWString_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::TAO::WString_Manager[3][4][2], 0);
  return retval;
}

void
Test::MultiArrayWString_free (
    Test::MultiArrayWString_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
Test::MultiArrayWString_copy (
    Test::MultiArrayWString_slice * _tao_to,
    const Test::MultiArrayWString_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 3; ++i0)
    {
      for ( ::CORBA::ULong i1 = 0; i1 < 4; ++i1)
        {
          for ( ::CORBA::ULong i2 = 0; i2 < 2; ++i2)
            {
              _tao_to[i0][i1][i2] = _tao_from[i0][i1][i2];
            }
        }
    }
}

// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\array_cs.cpp:97

Test::MultiArrayStruct_slice *
Test::MultiArrayStruct_dup (const Test::MultiArrayStruct_slice *_tao_src_array)
{
  Test::MultiArrayStruct_slice *_tao_dup_array =
    Test::MultiArrayStruct_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <Test::MultiArrayStruct_slice *> (0);
    }
  
  Test::MultiArrayStruct_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

Test::MultiArrayStruct_slice *
Test::MultiArrayStruct_alloc (void)
{
  Test::MultiArrayStruct_slice *retval = 0;
  ACE_NEW_RETURN (retval, Test::NestedTestStruct[3][4][2], 0);
  return retval;
}

void
Test::MultiArrayStruct_free (
    Test::MultiArrayStruct_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
Test::MultiArrayStruct_copy (
    Test::MultiArrayStruct_slice * _tao_to,
    const Test::MultiArrayStruct_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 3; ++i0)
    {
      for ( ::CORBA::ULong i1 = 0; i1 < 4; ++i1)
        {
          for ( ::CORBA::ULong i2 = 0; i2 < 2; ++i2)
            {
              _tao_to[i0][i1][i2] = _tao_from[i0][i1][i2];
            }
        }
    }
}

// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\array_cs.cpp:97

Test::ArrayFloat_slice *
Test::ArrayFloat_dup (const Test::ArrayFloat_slice *_tao_src_array)
{
  Test::ArrayFloat_slice *_tao_dup_array =
    Test::ArrayFloat_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <Test::ArrayFloat_slice *> (0);
    }
  
  Test::ArrayFloat_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

Test::ArrayFloat_slice *
Test::ArrayFloat_alloc (void)
{
  Test::ArrayFloat_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::Float[5], 0);
  return retval;
}

void
Test::ArrayFloat_free (
    Test::ArrayFloat_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
Test::ArrayFloat_copy (
    Test::ArrayFloat_slice * _tao_to,
    const Test::ArrayFloat_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 5; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\array_cs.cpp:97

Test::ArrayDouble_slice *
Test::ArrayDouble_dup (const Test::ArrayDouble_slice *_tao_src_array)
{
  Test::ArrayDouble_slice *_tao_dup_array =
    Test::ArrayDouble_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <Test::ArrayDouble_slice *> (0);
    }
  
  Test::ArrayDouble_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

Test::ArrayDouble_slice *
Test::ArrayDouble_alloc (void)
{
  Test::ArrayDouble_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::Double[5], 0);
  return retval;
}

void
Test::ArrayDouble_free (
    Test::ArrayDouble_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
Test::ArrayDouble_copy (
    Test::ArrayDouble_slice * _tao_to,
    const Test::ArrayDouble_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 5; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\array_cs.cpp:97

Test::ArrayLongDouble_slice *
Test::ArrayLongDouble_dup (const Test::ArrayLongDouble_slice *_tao_src_array)
{
  Test::ArrayLongDouble_slice *_tao_dup_array =
    Test::ArrayLongDouble_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <Test::ArrayLongDouble_slice *> (0);
    }
  
  Test::ArrayLongDouble_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

Test::ArrayLongDouble_slice *
Test::ArrayLongDouble_alloc (void)
{
  Test::ArrayLongDouble_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::LongDouble[5], 0);
  return retval;
}

void
Test::ArrayLongDouble_free (
    Test::ArrayLongDouble_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
Test::ArrayLongDouble_copy (
    Test::ArrayLongDouble_slice * _tao_to,
    const Test::ArrayLongDouble_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 5; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\sequence_cs.cpp:73

#if !defined (_TEST_FLOATLIST_CS_)
#define _TEST_FLOATLIST_CS_

Test::FloatList::FloatList (void)
{}

Test::FloatList::FloatList (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Float
      > (max)
{}

Test::FloatList::FloatList (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Float * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Float
      >
    (max, length, buffer, release)
{}

Test::FloatList::FloatList (
    const FloatList &seq)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Float
      > (seq)
{}

Test::FloatList::~FloatList (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\sequence_cs.cpp:73

#if !defined (_TEST_DOUBLELIST_CS_)
#define _TEST_DOUBLELIST_CS_

Test::DoubleList::DoubleList (void)
{}

Test::DoubleList::DoubleList (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Double
      > (max)
{}

Test::DoubleList::DoubleList (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Double * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Double
      >
    (max, length, buffer, release)
{}

Test::DoubleList::DoubleList (
    const DoubleList &seq)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Double
      > (seq)
{}

Test::DoubleList::~DoubleList (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\sequence_cs.cpp:73

#if !defined (_TEST_LONGDOUBLELIST_CS_)
#define _TEST_LONGDOUBLELIST_CS_

Test::LongDoubleList::LongDoubleList (void)
{}

Test::LongDoubleList::LongDoubleList (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::LongDouble
      > (max)
{}

Test::LongDoubleList::LongDoubleList (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::LongDouble * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ::CORBA::LongDouble
      >
    (max, length, buffer, release)
{}

Test::LongDoubleList::LongDoubleList (
    const LongDoubleList &seq)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::LongDouble
      > (seq)
{}

Test::LongDoubleList::~LongDoubleList (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\array_cs.cpp:97

Test::MultiArrayFloat_slice *
Test::MultiArrayFloat_dup (const Test::MultiArrayFloat_slice *_tao_src_array)
{
  Test::MultiArrayFloat_slice *_tao_dup_array =
    Test::MultiArrayFloat_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <Test::MultiArrayFloat_slice *> (0);
    }
  
  Test::MultiArrayFloat_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

Test::MultiArrayFloat_slice *
Test::MultiArrayFloat_alloc (void)
{
  Test::MultiArrayFloat_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::Float[3][4][2], 0);
  return retval;
}

void
Test::MultiArrayFloat_free (
    Test::MultiArrayFloat_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
Test::MultiArrayFloat_copy (
    Test::MultiArrayFloat_slice * _tao_to,
    const Test::MultiArrayFloat_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 3; ++i0)
    {
      for ( ::CORBA::ULong i1 = 0; i1 < 4; ++i1)
        {
          for ( ::CORBA::ULong i2 = 0; i2 < 2; ++i2)
            {
              _tao_to[i0][i1][i2] = _tao_from[i0][i1][i2];
            }
        }
    }
}

// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\array_cs.cpp:97

Test::MultiArrayDouble_slice *
Test::MultiArrayDouble_dup (const Test::MultiArrayDouble_slice *_tao_src_array)
{
  Test::MultiArrayDouble_slice *_tao_dup_array =
    Test::MultiArrayDouble_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <Test::MultiArrayDouble_slice *> (0);
    }
  
  Test::MultiArrayDouble_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

Test::MultiArrayDouble_slice *
Test::MultiArrayDouble_alloc (void)
{
  Test::MultiArrayDouble_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::Double[3][4][2], 0);
  return retval;
}

void
Test::MultiArrayDouble_free (
    Test::MultiArrayDouble_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
Test::MultiArrayDouble_copy (
    Test::MultiArrayDouble_slice * _tao_to,
    const Test::MultiArrayDouble_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 3; ++i0)
    {
      for ( ::CORBA::ULong i1 = 0; i1 < 4; ++i1)
        {
          for ( ::CORBA::ULong i2 = 0; i2 < 2; ++i2)
            {
              _tao_to[i0][i1][i2] = _tao_from[i0][i1][i2];
            }
        }
    }
}

// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\array_cs.cpp:97

Test::MultiArrayLongDouble_slice *
Test::MultiArrayLongDouble_dup (const Test::MultiArrayLongDouble_slice *_tao_src_array)
{
  Test::MultiArrayLongDouble_slice *_tao_dup_array =
    Test::MultiArrayLongDouble_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <Test::MultiArrayLongDouble_slice *> (0);
    }
  
  Test::MultiArrayLongDouble_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

Test::MultiArrayLongDouble_slice *
Test::MultiArrayLongDouble_alloc (void)
{
  Test::MultiArrayLongDouble_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::LongDouble[3][4][2], 0);
  return retval;
}

void
Test::MultiArrayLongDouble_free (
    Test::MultiArrayLongDouble_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
Test::MultiArrayLongDouble_copy (
    Test::MultiArrayLongDouble_slice * _tao_to,
    const Test::MultiArrayLongDouble_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 3; ++i0)
    {
      for ( ::CORBA::ULong i1 = 0; i1 < 4; ++i1)
        {
          for ( ::CORBA::ULong i2 = 0; i2 < 2; ++i2)
            {
              _tao_to[i0][i1][i2] = _tao_from[i0][i1][i2];
            }
        }
    }
}

// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\array_cs.cpp:97

Test::ArrayChar_slice *
Test::ArrayChar_dup (const Test::ArrayChar_slice *_tao_src_array)
{
  Test::ArrayChar_slice *_tao_dup_array =
    Test::ArrayChar_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <Test::ArrayChar_slice *> (0);
    }
  
  Test::ArrayChar_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

Test::ArrayChar_slice *
Test::ArrayChar_alloc (void)
{
  Test::ArrayChar_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::Char[5], 0);
  return retval;
}

void
Test::ArrayChar_free (
    Test::ArrayChar_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
Test::ArrayChar_copy (
    Test::ArrayChar_slice * _tao_to,
    const Test::ArrayChar_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 5; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\array_cs.cpp:97

Test::ArrayWChar_slice *
Test::ArrayWChar_dup (const Test::ArrayWChar_slice *_tao_src_array)
{
  Test::ArrayWChar_slice *_tao_dup_array =
    Test::ArrayWChar_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <Test::ArrayWChar_slice *> (0);
    }
  
  Test::ArrayWChar_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

Test::ArrayWChar_slice *
Test::ArrayWChar_alloc (void)
{
  Test::ArrayWChar_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::WChar[5], 0);
  return retval;
}

void
Test::ArrayWChar_free (
    Test::ArrayWChar_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
Test::ArrayWChar_copy (
    Test::ArrayWChar_slice * _tao_to,
    const Test::ArrayWChar_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 5; ++i0)
    {
      _tao_to[i0] = _tao_from[i0];
    }
}

// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\sequence_cs.cpp:73

#if !defined (_TEST_CHARLIST_CS_)
#define _TEST_CHARLIST_CS_

Test::CharList::CharList (void)
{}

Test::CharList::CharList (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Char
      > (max)
{}

Test::CharList::CharList (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Char * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Char
      >
    (max, length, buffer, release)
{}

Test::CharList::CharList (
    const CharList &seq)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Char
      > (seq)
{}

Test::CharList::~CharList (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\sequence_cs.cpp:73

#if !defined (_TEST_WCHARLIST_CS_)
#define _TEST_WCHARLIST_CS_

Test::WCharList::WCharList (void)
{}

Test::WCharList::WCharList (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::WChar
      > (max)
{}

Test::WCharList::WCharList (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::WChar * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ::CORBA::WChar
      >
    (max, length, buffer, release)
{}

Test::WCharList::WCharList (
    const WCharList &seq)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::WChar
      > (seq)
{}

Test::WCharList::~WCharList (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\array_cs.cpp:97

Test::MultiArrayChar_slice *
Test::MultiArrayChar_dup (const Test::MultiArrayChar_slice *_tao_src_array)
{
  Test::MultiArrayChar_slice *_tao_dup_array =
    Test::MultiArrayChar_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <Test::MultiArrayChar_slice *> (0);
    }
  
  Test::MultiArrayChar_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

Test::MultiArrayChar_slice *
Test::MultiArrayChar_alloc (void)
{
  Test::MultiArrayChar_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::Char[3][4][2], 0);
  return retval;
}

void
Test::MultiArrayChar_free (
    Test::MultiArrayChar_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
Test::MultiArrayChar_copy (
    Test::MultiArrayChar_slice * _tao_to,
    const Test::MultiArrayChar_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 3; ++i0)
    {
      for ( ::CORBA::ULong i1 = 0; i1 < 4; ++i1)
        {
          for ( ::CORBA::ULong i2 = 0; i2 < 2; ++i2)
            {
              _tao_to[i0][i1][i2] = _tao_from[i0][i1][i2];
            }
        }
    }
}

// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\array_cs.cpp:97

Test::MultiArrayWChar_slice *
Test::MultiArrayWChar_dup (const Test::MultiArrayWChar_slice *_tao_src_array)
{
  Test::MultiArrayWChar_slice *_tao_dup_array =
    Test::MultiArrayWChar_alloc ();
  
  if (!_tao_dup_array)
    {
      return static_cast <Test::MultiArrayWChar_slice *> (0);
    }
  
  Test::MultiArrayWChar_copy (_tao_dup_array, _tao_src_array);
  return _tao_dup_array;
}

Test::MultiArrayWChar_slice *
Test::MultiArrayWChar_alloc (void)
{
  Test::MultiArrayWChar_slice *retval = 0;
  ACE_NEW_RETURN (retval, ::CORBA::WChar[3][4][2], 0);
  return retval;
}

void
Test::MultiArrayWChar_free (
    Test::MultiArrayWChar_slice *_tao_slice)
{
  delete [] _tao_slice;
}

void
Test::MultiArrayWChar_copy (
    Test::MultiArrayWChar_slice * _tao_to,
    const Test::MultiArrayWChar_slice *_tao_from)
{
  // Copy each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 3; ++i0)
    {
      for ( ::CORBA::ULong i1 = 0; i1 < 4; ++i1)
        {
          for ( ::CORBA::ULong i2 = 0; i2 < 2; ++i2)
            {
              _tao_to[i0][i1][i2] = _tao_from[i0][i1][i2];
            }
        }
    }
}

// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_structure\cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::NestedTestStruct &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.Id) &&
    (strm << _tao_aggregate.Message.in ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::NestedTestStruct &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.Id) &&
    (strm >> _tao_aggregate.Message.out ());
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_Test_LongList_CPP_
#define _TAO_CDR_OP_Test_LongList_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::LongList &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::LongList &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Test_LongList_CPP_ */

// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_Test_StringList_CPP_
#define _TAO_CDR_OP_Test_StringList_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::StringList &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::StringList &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Test_StringList_CPP_ */

// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_Test_WStringList_CPP_
#define _TAO_CDR_OP_Test_WStringList_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::WStringList &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::WStringList &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Test_WStringList_CPP_ */

// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_Test_StructList_CPP_
#define _TAO_CDR_OP_Test_StructList_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::StructList &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::StructList &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Test_StructList_CPP_ */

// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::ArrayLong_forany &_tao_array)
{
  return
    strm.write_long_array (
        reinterpret_cast <const ACE_CDR::Long *> (_tao_array.in ()),
        5);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::ArrayLong_forany &_tao_array)
{
  return
    strm.read_long_array (
        reinterpret_cast <ACE_CDR::Long *> (_tao_array.out ()),
        5);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::ArrayString_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for ( ::CORBA::ULong i0 = 0; i0 < 10 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm << _tao_array [i0].in ());
    }

  return _tao_marshal_flag;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::ArrayString_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for ( ::CORBA::ULong i0 = 0; i0 < 10 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm >> _tao_array [i0].out ());
    }

  return _tao_marshal_flag;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::ArrayWString_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for ( ::CORBA::ULong i0 = 0; i0 < 4 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm << _tao_array [i0].in ());
    }

  return _tao_marshal_flag;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::ArrayWString_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for ( ::CORBA::ULong i0 = 0; i0 < 4 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm >> _tao_array [i0].out ());
    }

  return _tao_marshal_flag;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::ArrayStruct_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for ( ::CORBA::ULong i0 = 0; i0 < 5 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm << _tao_array [i0]);
    }

  return _tao_marshal_flag;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::ArrayStruct_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for ( ::CORBA::ULong i0 = 0; i0 < 5 && _tao_marshal_flag; ++i0)
    {
      _tao_marshal_flag = (strm >> _tao_array [i0]);
    }

  return _tao_marshal_flag;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::MultiArrayLong_forany &_tao_array)
{
  return
    strm.write_long_array (
        reinterpret_cast <const ACE_CDR::Long *> (_tao_array.in ()),
        3*4*2);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::MultiArrayLong_forany &_tao_array)
{
  return
    strm.read_long_array (
        reinterpret_cast <ACE_CDR::Long *> (_tao_array.out ()),
        3*4*2);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::MultiArrayString_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for ( ::CORBA::ULong i0 = 0; i0 < 3 && _tao_marshal_flag; ++i0)
    {
      for ( ::CORBA::ULong i1 = 0; i1 < 4 && _tao_marshal_flag; ++i1)
        {
          for ( ::CORBA::ULong i2 = 0; i2 < 2 && _tao_marshal_flag; ++i2)
            {
              _tao_marshal_flag = (strm << _tao_array [i0][i1][i2].in ());
            }
        }
    }

  return _tao_marshal_flag;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::MultiArrayString_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for ( ::CORBA::ULong i0 = 0; i0 < 3 && _tao_marshal_flag; ++i0)
    {
      for ( ::CORBA::ULong i1 = 0; i1 < 4 && _tao_marshal_flag; ++i1)
        {
          for ( ::CORBA::ULong i2 = 0; i2 < 2 && _tao_marshal_flag; ++i2)
            {
              _tao_marshal_flag = (strm >> _tao_array [i0][i1][i2].out ());
            }
        }
    }

  return _tao_marshal_flag;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::MultiArrayWString_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for ( ::CORBA::ULong i0 = 0; i0 < 3 && _tao_marshal_flag; ++i0)
    {
      for ( ::CORBA::ULong i1 = 0; i1 < 4 && _tao_marshal_flag; ++i1)
        {
          for ( ::CORBA::ULong i2 = 0; i2 < 2 && _tao_marshal_flag; ++i2)
            {
              _tao_marshal_flag = (strm << _tao_array [i0][i1][i2].in ());
            }
        }
    }

  return _tao_marshal_flag;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::MultiArrayWString_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for ( ::CORBA::ULong i0 = 0; i0 < 3 && _tao_marshal_flag; ++i0)
    {
      for ( ::CORBA::ULong i1 = 0; i1 < 4 && _tao_marshal_flag; ++i1)
        {
          for ( ::CORBA::ULong i2 = 0; i2 < 2 && _tao_marshal_flag; ++i2)
            {
              _tao_marshal_flag = (strm >> _tao_array [i0][i1][i2].out ());
            }
        }
    }

  return _tao_marshal_flag;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::MultiArrayStruct_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for ( ::CORBA::ULong i0 = 0; i0 < 3 && _tao_marshal_flag; ++i0)
    {
      for ( ::CORBA::ULong i1 = 0; i1 < 4 && _tao_marshal_flag; ++i1)
        {
          for ( ::CORBA::ULong i2 = 0; i2 < 2 && _tao_marshal_flag; ++i2)
            {
              _tao_marshal_flag = (strm << _tao_array [i0][i1][i2]);
            }
        }
    }

  return _tao_marshal_flag;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::MultiArrayStruct_forany &_tao_array)
{
  CORBA::Boolean _tao_marshal_flag = true;
  
  for ( ::CORBA::ULong i0 = 0; i0 < 3 && _tao_marshal_flag; ++i0)
    {
      for ( ::CORBA::ULong i1 = 0; i1 < 4 && _tao_marshal_flag; ++i1)
        {
          for ( ::CORBA::ULong i2 = 0; i2 < 2 && _tao_marshal_flag; ++i2)
            {
              _tao_marshal_flag = (strm >> _tao_array [i0][i1][i2]);
            }
        }
    }

  return _tao_marshal_flag;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::ArrayFloat_forany &_tao_array)
{
  return
    strm.write_float_array (
        reinterpret_cast <const ACE_CDR::Float *> (_tao_array.in ()),
        5);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::ArrayFloat_forany &_tao_array)
{
  return
    strm.read_float_array (
        reinterpret_cast <ACE_CDR::Float *> (_tao_array.out ()),
        5);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::ArrayDouble_forany &_tao_array)
{
  return
    strm.write_double_array (
        reinterpret_cast <const ACE_CDR::Double *> (_tao_array.in ()),
        5);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::ArrayDouble_forany &_tao_array)
{
  return
    strm.read_double_array (
        reinterpret_cast <ACE_CDR::Double *> (_tao_array.out ()),
        5);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::ArrayLongDouble_forany &_tao_array)
{
  return
    strm.write_longdouble_array (
        reinterpret_cast <const ACE_CDR::LongDouble *> (_tao_array.in ()),
        5);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::ArrayLongDouble_forany &_tao_array)
{
  return
    strm.read_longdouble_array (
        reinterpret_cast <ACE_CDR::LongDouble *> (_tao_array.out ()),
        5);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_Test_FloatList_CPP_
#define _TAO_CDR_OP_Test_FloatList_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::FloatList &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::FloatList &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Test_FloatList_CPP_ */

// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_Test_DoubleList_CPP_
#define _TAO_CDR_OP_Test_DoubleList_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::DoubleList &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::DoubleList &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Test_DoubleList_CPP_ */

// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_Test_LongDoubleList_CPP_
#define _TAO_CDR_OP_Test_LongDoubleList_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::LongDoubleList &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::LongDoubleList &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Test_LongDoubleList_CPP_ */

// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::MultiArrayFloat_forany &_tao_array)
{
  return
    strm.write_float_array (
        reinterpret_cast <const ACE_CDR::Float *> (_tao_array.in ()),
        3*4*2);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::MultiArrayFloat_forany &_tao_array)
{
  return
    strm.read_float_array (
        reinterpret_cast <ACE_CDR::Float *> (_tao_array.out ()),
        3*4*2);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::MultiArrayDouble_forany &_tao_array)
{
  return
    strm.write_double_array (
        reinterpret_cast <const ACE_CDR::Double *> (_tao_array.in ()),
        3*4*2);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::MultiArrayDouble_forany &_tao_array)
{
  return
    strm.read_double_array (
        reinterpret_cast <ACE_CDR::Double *> (_tao_array.out ()),
        3*4*2);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::MultiArrayLongDouble_forany &_tao_array)
{
  return
    strm.write_longdouble_array (
        reinterpret_cast <const ACE_CDR::LongDouble *> (_tao_array.in ()),
        3*4*2);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::MultiArrayLongDouble_forany &_tao_array)
{
  return
    strm.read_longdouble_array (
        reinterpret_cast <ACE_CDR::LongDouble *> (_tao_array.out ()),
        3*4*2);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::ArrayChar_forany &_tao_array)
{
  return
    strm.write_char_array (
        reinterpret_cast <const ACE_CDR::Char *> (_tao_array.in ()),
        5);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::ArrayChar_forany &_tao_array)
{
  return
    strm.read_char_array (
        reinterpret_cast <ACE_CDR::Char *> (_tao_array.out ()),
        5);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::ArrayWChar_forany &_tao_array)
{
  return
    strm.write_wchar_array (
        reinterpret_cast <const ACE_CDR::WChar *> (_tao_array.in ()),
        5);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::ArrayWChar_forany &_tao_array)
{
  return
    strm.read_wchar_array (
        reinterpret_cast <ACE_CDR::WChar *> (_tao_array.out ()),
        5);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_Test_CharList_CPP_
#define _TAO_CDR_OP_Test_CharList_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::CharList &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::CharList &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Test_CharList_CPP_ */

// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_Test_WCharList_CPP_
#define _TAO_CDR_OP_Test_WCharList_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::WCharList &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::WCharList &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Test_WCharList_CPP_ */

// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::MultiArrayChar_forany &_tao_array)
{
  return
    strm.write_char_array (
        reinterpret_cast <const ACE_CDR::Char *> (_tao_array.in ()),
        3*4*2);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::MultiArrayChar_forany &_tao_array)
{
  return
    strm.read_char_array (
        reinterpret_cast <ACE_CDR::Char *> (_tao_array.out ()),
        3*4*2);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\cdr_op_cs.cpp:166


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::MultiArrayWChar_forany &_tao_array)
{
  return
    strm.write_wchar_array (
        reinterpret_cast <const ACE_CDR::WChar *> (_tao_array.in ()),
        3*4*2);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::MultiArrayWChar_forany &_tao_array)
{
  return
    strm.read_wchar_array (
        reinterpret_cast <ACE_CDR::WChar *> (_tao_array.out ()),
        3*4*2);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_structure\cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Test::BasicTestStruct &_tao_aggregate)
{
  Test::ArrayLong_forany _tao_aggregate_LongArray
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Test::ArrayLong_slice*) (
      #else
      (const_cast<
          Test::ArrayLong_slice*> (
      #endif
          _tao_aggregate.LongArray
        )
    );
  Test::ArrayString_forany _tao_aggregate_StringArray
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Test::ArrayString_slice*) (
      #else
      (const_cast<
          Test::ArrayString_slice*> (
      #endif
          _tao_aggregate.StringArray
        )
    );
  Test::ArrayWString_forany _tao_aggregate_WStringArray
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Test::ArrayWString_slice*) (
      #else
      (const_cast<
          Test::ArrayWString_slice*> (
      #endif
          _tao_aggregate.WStringArray
        )
    );
  Test::ArrayStruct_forany _tao_aggregate_StructArray
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Test::ArrayStruct_slice*) (
      #else
      (const_cast<
          Test::ArrayStruct_slice*> (
      #endif
          _tao_aggregate.StructArray
        )
    );
  Test::MultiArrayLong_forany _tao_aggregate_LongMultiArray
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Test::MultiArrayLong_slice*) (
      #else
      (const_cast<
          Test::MultiArrayLong_slice*> (
      #endif
          _tao_aggregate.LongMultiArray
        )
    );
  Test::MultiArrayString_forany _tao_aggregate_StringMultiArray
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Test::MultiArrayString_slice*) (
      #else
      (const_cast<
          Test::MultiArrayString_slice*> (
      #endif
          _tao_aggregate.StringMultiArray
        )
    );
  Test::MultiArrayWString_forany _tao_aggregate_WStringMultiArray
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Test::MultiArrayWString_slice*) (
      #else
      (const_cast<
          Test::MultiArrayWString_slice*> (
      #endif
          _tao_aggregate.WStringMultiArray
        )
    );
  Test::MultiArrayStruct_forany _tao_aggregate_StructMultiArray
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Test::MultiArrayStruct_slice*) (
      #else
      (const_cast<
          Test::MultiArrayStruct_slice*> (
      #endif
          _tao_aggregate.StructMultiArray
        )
    );
  Test::ArrayFloat_forany _tao_aggregate_FloatArray
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Test::ArrayFloat_slice*) (
      #else
      (const_cast<
          Test::ArrayFloat_slice*> (
      #endif
          _tao_aggregate.FloatArray
        )
    );
  Test::ArrayDouble_forany _tao_aggregate_DoubleArray
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Test::ArrayDouble_slice*) (
      #else
      (const_cast<
          Test::ArrayDouble_slice*> (
      #endif
          _tao_aggregate.DoubleArray
        )
    );
  Test::ArrayLongDouble_forany _tao_aggregate_LongDoubleArray
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Test::ArrayLongDouble_slice*) (
      #else
      (const_cast<
          Test::ArrayLongDouble_slice*> (
      #endif
          _tao_aggregate.LongDoubleArray
        )
    );
  Test::MultiArrayFloat_forany _tao_aggregate_FloatMultiArray
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Test::MultiArrayFloat_slice*) (
      #else
      (const_cast<
          Test::MultiArrayFloat_slice*> (
      #endif
          _tao_aggregate.FloatMultiArray
        )
    );
  Test::MultiArrayDouble_forany _tao_aggregate_DoubleMultiArray
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Test::MultiArrayDouble_slice*) (
      #else
      (const_cast<
          Test::MultiArrayDouble_slice*> (
      #endif
          _tao_aggregate.DoubleMultiArray
        )
    );
  Test::MultiArrayLongDouble_forany _tao_aggregate_LongDoubleMultiArray
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Test::MultiArrayLongDouble_slice*) (
      #else
      (const_cast<
          Test::MultiArrayLongDouble_slice*> (
      #endif
          _tao_aggregate.LongDoubleMultiArray
        )
    );
  Test::ArrayChar_forany _tao_aggregate_CharArray
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Test::ArrayChar_slice*) (
      #else
      (const_cast<
          Test::ArrayChar_slice*> (
      #endif
          _tao_aggregate.CharArray
        )
    );
  Test::ArrayWChar_forany _tao_aggregate_WCharArray
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Test::ArrayWChar_slice*) (
      #else
      (const_cast<
          Test::ArrayWChar_slice*> (
      #endif
          _tao_aggregate.WCharArray
        )
    );
  Test::MultiArrayChar_forany _tao_aggregate_CharMultiArray
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Test::MultiArrayChar_slice*) (
      #else
      (const_cast<
          Test::MultiArrayChar_slice*> (
      #endif
          _tao_aggregate.CharMultiArray
        )
    );
  Test::MultiArrayWChar_forany _tao_aggregate_WCharMultiArray
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Test::MultiArrayWChar_slice*) (
      #else
      (const_cast<
          Test::MultiArrayWChar_slice*> (
      #endif
          _tao_aggregate.WCharMultiArray
        )
    );
  return
    (strm << _tao_aggregate.Id) &&
    (strm << _tao_aggregate.Message.in ()) &&
    (strm << _tao_aggregate.WMessage.in ()) &&
    (strm << _tao_aggregate.LongSequence) &&
    (strm << _tao_aggregate.StringSequence) &&
    (strm << _tao_aggregate.WStringSequence) &&
    (strm << _tao_aggregate_LongArray) &&
    (strm << _tao_aggregate_StringArray) &&
    (strm << _tao_aggregate_WStringArray) &&
    (strm << _tao_aggregate.StructTest) &&
    (strm << _tao_aggregate.StructSequence) &&
    (strm << _tao_aggregate_StructArray) &&
    (strm << _tao_aggregate_LongMultiArray) &&
    (strm << _tao_aggregate_StringMultiArray) &&
    (strm << _tao_aggregate_WStringMultiArray) &&
    (strm << _tao_aggregate_StructMultiArray) &&
    (strm << _tao_aggregate.FloatType) &&
    (strm << _tao_aggregate.DoubleType) &&
    (strm << _tao_aggregate.LongDoubleType) &&
    (strm << _tao_aggregate_FloatArray) &&
    (strm << _tao_aggregate_DoubleArray) &&
    (strm << _tao_aggregate_LongDoubleArray) &&
    (strm << _tao_aggregate.FloatSequence) &&
    (strm << _tao_aggregate.DoubleSequence) &&
    (strm << _tao_aggregate.LongDoubleSequence) &&
    (strm << _tao_aggregate_FloatMultiArray) &&
    (strm << _tao_aggregate_DoubleMultiArray) &&
    (strm << _tao_aggregate_LongDoubleMultiArray) &&
    (strm << ::ACE_OutputCDR::from_char (_tao_aggregate.CharType)) &&
    (strm << ::ACE_OutputCDR::from_wchar (_tao_aggregate.WCharType)) &&
    (strm << _tao_aggregate_CharArray) &&
    (strm << _tao_aggregate_WCharArray) &&
    (strm << _tao_aggregate.CharSequence) &&
    (strm << _tao_aggregate.WCharSequence) &&
    (strm << _tao_aggregate_CharMultiArray) &&
    (strm << _tao_aggregate_WCharMultiArray);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Test::BasicTestStruct &_tao_aggregate)
{
  Test::ArrayLong_forany _tao_aggregate_LongArray
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Test::ArrayLong_slice*) (
      #else
      (const_cast<
          Test::ArrayLong_slice*> (
      #endif
          _tao_aggregate.LongArray
        )
    );
  Test::ArrayString_forany _tao_aggregate_StringArray
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Test::ArrayString_slice*) (
      #else
      (const_cast<
          Test::ArrayString_slice*> (
      #endif
          _tao_aggregate.StringArray
        )
    );
  Test::ArrayWString_forany _tao_aggregate_WStringArray
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Test::ArrayWString_slice*) (
      #else
      (const_cast<
          Test::ArrayWString_slice*> (
      #endif
          _tao_aggregate.WStringArray
        )
    );
  Test::ArrayStruct_forany _tao_aggregate_StructArray
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Test::ArrayStruct_slice*) (
      #else
      (const_cast<
          Test::ArrayStruct_slice*> (
      #endif
          _tao_aggregate.StructArray
        )
    );
  Test::MultiArrayLong_forany _tao_aggregate_LongMultiArray
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Test::MultiArrayLong_slice*) (
      #else
      (const_cast<
          Test::MultiArrayLong_slice*> (
      #endif
          _tao_aggregate.LongMultiArray
        )
    );
  Test::MultiArrayString_forany _tao_aggregate_StringMultiArray
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Test::MultiArrayString_slice*) (
      #else
      (const_cast<
          Test::MultiArrayString_slice*> (
      #endif
          _tao_aggregate.StringMultiArray
        )
    );
  Test::MultiArrayWString_forany _tao_aggregate_WStringMultiArray
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Test::MultiArrayWString_slice*) (
      #else
      (const_cast<
          Test::MultiArrayWString_slice*> (
      #endif
          _tao_aggregate.WStringMultiArray
        )
    );
  Test::MultiArrayStruct_forany _tao_aggregate_StructMultiArray
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Test::MultiArrayStruct_slice*) (
      #else
      (const_cast<
          Test::MultiArrayStruct_slice*> (
      #endif
          _tao_aggregate.StructMultiArray
        )
    );
  Test::ArrayFloat_forany _tao_aggregate_FloatArray
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Test::ArrayFloat_slice*) (
      #else
      (const_cast<
          Test::ArrayFloat_slice*> (
      #endif
          _tao_aggregate.FloatArray
        )
    );
  Test::ArrayDouble_forany _tao_aggregate_DoubleArray
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Test::ArrayDouble_slice*) (
      #else
      (const_cast<
          Test::ArrayDouble_slice*> (
      #endif
          _tao_aggregate.DoubleArray
        )
    );
  Test::ArrayLongDouble_forany _tao_aggregate_LongDoubleArray
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Test::ArrayLongDouble_slice*) (
      #else
      (const_cast<
          Test::ArrayLongDouble_slice*> (
      #endif
          _tao_aggregate.LongDoubleArray
        )
    );
  Test::MultiArrayFloat_forany _tao_aggregate_FloatMultiArray
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Test::MultiArrayFloat_slice*) (
      #else
      (const_cast<
          Test::MultiArrayFloat_slice*> (
      #endif
          _tao_aggregate.FloatMultiArray
        )
    );
  Test::MultiArrayDouble_forany _tao_aggregate_DoubleMultiArray
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Test::MultiArrayDouble_slice*) (
      #else
      (const_cast<
          Test::MultiArrayDouble_slice*> (
      #endif
          _tao_aggregate.DoubleMultiArray
        )
    );
  Test::MultiArrayLongDouble_forany _tao_aggregate_LongDoubleMultiArray
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Test::MultiArrayLongDouble_slice*) (
      #else
      (const_cast<
          Test::MultiArrayLongDouble_slice*> (
      #endif
          _tao_aggregate.LongDoubleMultiArray
        )
    );
  Test::ArrayChar_forany _tao_aggregate_CharArray
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Test::ArrayChar_slice*) (
      #else
      (const_cast<
          Test::ArrayChar_slice*> (
      #endif
          _tao_aggregate.CharArray
        )
    );
  Test::ArrayWChar_forany _tao_aggregate_WCharArray
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Test::ArrayWChar_slice*) (
      #else
      (const_cast<
          Test::ArrayWChar_slice*> (
      #endif
          _tao_aggregate.WCharArray
        )
    );
  Test::MultiArrayChar_forany _tao_aggregate_CharMultiArray
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Test::MultiArrayChar_slice*) (
      #else
      (const_cast<
          Test::MultiArrayChar_slice*> (
      #endif
          _tao_aggregate.CharMultiArray
        )
    );
  Test::MultiArrayWChar_forany _tao_aggregate_WCharMultiArray
      #if defined __IBMCPP__ && __IBMCPP__ <= 800
      ((Test::MultiArrayWChar_slice*) (
      #else
      (const_cast<
          Test::MultiArrayWChar_slice*> (
      #endif
          _tao_aggregate.WCharMultiArray
        )
    );
  return
    (strm >> _tao_aggregate.Id) &&
    (strm >> _tao_aggregate.Message.out ()) &&
    (strm >> _tao_aggregate.WMessage.out ()) &&
    (strm >> _tao_aggregate.LongSequence) &&
    (strm >> _tao_aggregate.StringSequence) &&
    (strm >> _tao_aggregate.WStringSequence) &&
    (strm >> _tao_aggregate_LongArray) &&
    (strm >> _tao_aggregate_StringArray) &&
    (strm >> _tao_aggregate_WStringArray) &&
    (strm >> _tao_aggregate.StructTest) &&
    (strm >> _tao_aggregate.StructSequence) &&
    (strm >> _tao_aggregate_StructArray) &&
    (strm >> _tao_aggregate_LongMultiArray) &&
    (strm >> _tao_aggregate_StringMultiArray) &&
    (strm >> _tao_aggregate_WStringMultiArray) &&
    (strm >> _tao_aggregate_StructMultiArray) &&
    (strm >> _tao_aggregate.FloatType) &&
    (strm >> _tao_aggregate.DoubleType) &&
    (strm >> _tao_aggregate.LongDoubleType) &&
    (strm >> _tao_aggregate_FloatArray) &&
    (strm >> _tao_aggregate_DoubleArray) &&
    (strm >> _tao_aggregate_LongDoubleArray) &&
    (strm >> _tao_aggregate.FloatSequence) &&
    (strm >> _tao_aggregate.DoubleSequence) &&
    (strm >> _tao_aggregate.LongDoubleSequence) &&
    (strm >> _tao_aggregate_FloatMultiArray) &&
    (strm >> _tao_aggregate_DoubleMultiArray) &&
    (strm >> _tao_aggregate_LongDoubleMultiArray) &&
    (strm >> ::ACE_InputCDR::to_char (_tao_aggregate.CharType)) &&
    (strm >> ::ACE_InputCDR::to_wchar (_tao_aggregate.WCharType)) &&
    (strm >> _tao_aggregate_CharArray) &&
    (strm >> _tao_aggregate_WCharArray) &&
    (strm >> _tao_aggregate.CharSequence) &&
    (strm >> _tao_aggregate.WCharSequence) &&
    (strm >> _tao_aggregate_CharMultiArray) &&
    (strm >> _tao_aggregate_WCharMultiArray);
}

TAO_END_VERSIONED_NAMESPACE_DECL



