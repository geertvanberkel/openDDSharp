// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.2a_p15
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/


// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\array_ci.cpp:150

ACE_INLINE
void
TAO::Array_Traits<Test::ArrayLong_forany>::free (
    Test::ArrayLong_slice * _tao_slice
  )
{
  Test::ArrayLong_free (_tao_slice);
}

ACE_INLINE
Test::ArrayLong_slice *
TAO::Array_Traits<Test::ArrayLong_forany>::dup (
    const Test::ArrayLong_slice * _tao_slice
  )
{
  return Test::ArrayLong_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<Test::ArrayLong_forany>::copy (
    Test::ArrayLong_slice * _tao_to,
    const Test::ArrayLong_slice * _tao_from
  )
{
  Test::ArrayLong_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<Test::ArrayLong_forany>::zero (
    Test::ArrayLong_slice * _tao_slice
  )
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 5; ++i0)
    {
      _tao_slice[i0] = ::CORBA::Long ();
    }
}

ACE_INLINE
Test::ArrayLong_slice *
TAO::Array_Traits<Test::ArrayLong_forany>::alloc (void)
{
  return Test::ArrayLong_alloc ();
}


// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\array_ci.cpp:150

ACE_INLINE
void
TAO::Array_Traits<Test::ArrayString_forany>::free (
    Test::ArrayString_slice * _tao_slice
  )
{
  Test::ArrayString_free (_tao_slice);
}

ACE_INLINE
Test::ArrayString_slice *
TAO::Array_Traits<Test::ArrayString_forany>::dup (
    const Test::ArrayString_slice * _tao_slice
  )
{
  return Test::ArrayString_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<Test::ArrayString_forany>::copy (
    Test::ArrayString_slice * _tao_to,
    const Test::ArrayString_slice * _tao_from
  )
{
  Test::ArrayString_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<Test::ArrayString_forany>::zero (
    Test::ArrayString_slice * _tao_slice
  )
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 10; ++i0)
    {
      _tao_slice[i0] = ::TAO::String_Manager ();
    }
}

ACE_INLINE
Test::ArrayString_slice *
TAO::Array_Traits<Test::ArrayString_forany>::alloc (void)
{
  return Test::ArrayString_alloc ();
}


// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\array_ci.cpp:150

ACE_INLINE
void
TAO::Array_Traits<Test::ArrayWString_forany>::free (
    Test::ArrayWString_slice * _tao_slice
  )
{
  Test::ArrayWString_free (_tao_slice);
}

ACE_INLINE
Test::ArrayWString_slice *
TAO::Array_Traits<Test::ArrayWString_forany>::dup (
    const Test::ArrayWString_slice * _tao_slice
  )
{
  return Test::ArrayWString_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<Test::ArrayWString_forany>::copy (
    Test::ArrayWString_slice * _tao_to,
    const Test::ArrayWString_slice * _tao_from
  )
{
  Test::ArrayWString_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<Test::ArrayWString_forany>::zero (
    Test::ArrayWString_slice * _tao_slice
  )
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 4; ++i0)
    {
      _tao_slice[i0] = ::TAO::WString_Manager ();
    }
}

ACE_INLINE
Test::ArrayWString_slice *
TAO::Array_Traits<Test::ArrayWString_forany>::alloc (void)
{
  return Test::ArrayWString_alloc ();
}


// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\array_ci.cpp:150

ACE_INLINE
void
TAO::Array_Traits<Test::ArrayStruct_forany>::free (
    Test::ArrayStruct_slice * _tao_slice
  )
{
  Test::ArrayStruct_free (_tao_slice);
}

ACE_INLINE
Test::ArrayStruct_slice *
TAO::Array_Traits<Test::ArrayStruct_forany>::dup (
    const Test::ArrayStruct_slice * _tao_slice
  )
{
  return Test::ArrayStruct_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<Test::ArrayStruct_forany>::copy (
    Test::ArrayStruct_slice * _tao_to,
    const Test::ArrayStruct_slice * _tao_from
  )
{
  Test::ArrayStruct_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<Test::ArrayStruct_forany>::zero (
    Test::ArrayStruct_slice * _tao_slice
  )
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 5; ++i0)
    {
      _tao_slice[i0] = Test::NestedTestStruct ();
    }
}

ACE_INLINE
Test::ArrayStruct_slice *
TAO::Array_Traits<Test::ArrayStruct_forany>::alloc (void)
{
  return Test::ArrayStruct_alloc ();
}


// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\array_ci.cpp:150

ACE_INLINE
void
TAO::Array_Traits<Test::MultiArrayLong_forany>::free (
    Test::MultiArrayLong_slice * _tao_slice
  )
{
  Test::MultiArrayLong_free (_tao_slice);
}

ACE_INLINE
Test::MultiArrayLong_slice *
TAO::Array_Traits<Test::MultiArrayLong_forany>::dup (
    const Test::MultiArrayLong_slice * _tao_slice
  )
{
  return Test::MultiArrayLong_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<Test::MultiArrayLong_forany>::copy (
    Test::MultiArrayLong_slice * _tao_to,
    const Test::MultiArrayLong_slice * _tao_from
  )
{
  Test::MultiArrayLong_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<Test::MultiArrayLong_forany>::zero (
    Test::MultiArrayLong_slice * _tao_slice
  )
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 3; ++i0)
    {
      for ( ::CORBA::ULong i1 = 0; i1 < 4; ++i1)
        {
          for ( ::CORBA::ULong i2 = 0; i2 < 2; ++i2)
            {
              _tao_slice[i0][i1][i2] = ::CORBA::Long ();
            }
        }
    }
}

ACE_INLINE
Test::MultiArrayLong_slice *
TAO::Array_Traits<Test::MultiArrayLong_forany>::alloc (void)
{
  return Test::MultiArrayLong_alloc ();
}


// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\array_ci.cpp:150

ACE_INLINE
void
TAO::Array_Traits<Test::MultiArrayString_forany>::free (
    Test::MultiArrayString_slice * _tao_slice
  )
{
  Test::MultiArrayString_free (_tao_slice);
}

ACE_INLINE
Test::MultiArrayString_slice *
TAO::Array_Traits<Test::MultiArrayString_forany>::dup (
    const Test::MultiArrayString_slice * _tao_slice
  )
{
  return Test::MultiArrayString_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<Test::MultiArrayString_forany>::copy (
    Test::MultiArrayString_slice * _tao_to,
    const Test::MultiArrayString_slice * _tao_from
  )
{
  Test::MultiArrayString_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<Test::MultiArrayString_forany>::zero (
    Test::MultiArrayString_slice * _tao_slice
  )
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 3; ++i0)
    {
      for ( ::CORBA::ULong i1 = 0; i1 < 4; ++i1)
        {
          for ( ::CORBA::ULong i2 = 0; i2 < 2; ++i2)
            {
              _tao_slice[i0][i1][i2] = ::TAO::String_Manager ();
            }
        }
    }
}

ACE_INLINE
Test::MultiArrayString_slice *
TAO::Array_Traits<Test::MultiArrayString_forany>::alloc (void)
{
  return Test::MultiArrayString_alloc ();
}


// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\array_ci.cpp:150

ACE_INLINE
void
TAO::Array_Traits<Test::MultiArrayWString_forany>::free (
    Test::MultiArrayWString_slice * _tao_slice
  )
{
  Test::MultiArrayWString_free (_tao_slice);
}

ACE_INLINE
Test::MultiArrayWString_slice *
TAO::Array_Traits<Test::MultiArrayWString_forany>::dup (
    const Test::MultiArrayWString_slice * _tao_slice
  )
{
  return Test::MultiArrayWString_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<Test::MultiArrayWString_forany>::copy (
    Test::MultiArrayWString_slice * _tao_to,
    const Test::MultiArrayWString_slice * _tao_from
  )
{
  Test::MultiArrayWString_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<Test::MultiArrayWString_forany>::zero (
    Test::MultiArrayWString_slice * _tao_slice
  )
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 3; ++i0)
    {
      for ( ::CORBA::ULong i1 = 0; i1 < 4; ++i1)
        {
          for ( ::CORBA::ULong i2 = 0; i2 < 2; ++i2)
            {
              _tao_slice[i0][i1][i2] = ::TAO::WString_Manager ();
            }
        }
    }
}

ACE_INLINE
Test::MultiArrayWString_slice *
TAO::Array_Traits<Test::MultiArrayWString_forany>::alloc (void)
{
  return Test::MultiArrayWString_alloc ();
}


// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\array_ci.cpp:150

ACE_INLINE
void
TAO::Array_Traits<Test::MultiArrayStruct_forany>::free (
    Test::MultiArrayStruct_slice * _tao_slice
  )
{
  Test::MultiArrayStruct_free (_tao_slice);
}

ACE_INLINE
Test::MultiArrayStruct_slice *
TAO::Array_Traits<Test::MultiArrayStruct_forany>::dup (
    const Test::MultiArrayStruct_slice * _tao_slice
  )
{
  return Test::MultiArrayStruct_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<Test::MultiArrayStruct_forany>::copy (
    Test::MultiArrayStruct_slice * _tao_to,
    const Test::MultiArrayStruct_slice * _tao_from
  )
{
  Test::MultiArrayStruct_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<Test::MultiArrayStruct_forany>::zero (
    Test::MultiArrayStruct_slice * _tao_slice
  )
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 3; ++i0)
    {
      for ( ::CORBA::ULong i1 = 0; i1 < 4; ++i1)
        {
          for ( ::CORBA::ULong i2 = 0; i2 < 2; ++i2)
            {
              _tao_slice[i0][i1][i2] = Test::NestedTestStruct ();
            }
        }
    }
}

ACE_INLINE
Test::MultiArrayStruct_slice *
TAO::Array_Traits<Test::MultiArrayStruct_forany>::alloc (void)
{
  return Test::MultiArrayStruct_alloc ();
}


// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\array_ci.cpp:150

ACE_INLINE
void
TAO::Array_Traits<Test::ArrayFloat_forany>::free (
    Test::ArrayFloat_slice * _tao_slice
  )
{
  Test::ArrayFloat_free (_tao_slice);
}

ACE_INLINE
Test::ArrayFloat_slice *
TAO::Array_Traits<Test::ArrayFloat_forany>::dup (
    const Test::ArrayFloat_slice * _tao_slice
  )
{
  return Test::ArrayFloat_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<Test::ArrayFloat_forany>::copy (
    Test::ArrayFloat_slice * _tao_to,
    const Test::ArrayFloat_slice * _tao_from
  )
{
  Test::ArrayFloat_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<Test::ArrayFloat_forany>::zero (
    Test::ArrayFloat_slice * _tao_slice
  )
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 5; ++i0)
    {
      _tao_slice[i0] = ::CORBA::Float ();
    }
}

ACE_INLINE
Test::ArrayFloat_slice *
TAO::Array_Traits<Test::ArrayFloat_forany>::alloc (void)
{
  return Test::ArrayFloat_alloc ();
}


// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\array_ci.cpp:150

ACE_INLINE
void
TAO::Array_Traits<Test::ArrayDouble_forany>::free (
    Test::ArrayDouble_slice * _tao_slice
  )
{
  Test::ArrayDouble_free (_tao_slice);
}

ACE_INLINE
Test::ArrayDouble_slice *
TAO::Array_Traits<Test::ArrayDouble_forany>::dup (
    const Test::ArrayDouble_slice * _tao_slice
  )
{
  return Test::ArrayDouble_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<Test::ArrayDouble_forany>::copy (
    Test::ArrayDouble_slice * _tao_to,
    const Test::ArrayDouble_slice * _tao_from
  )
{
  Test::ArrayDouble_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<Test::ArrayDouble_forany>::zero (
    Test::ArrayDouble_slice * _tao_slice
  )
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 5; ++i0)
    {
      _tao_slice[i0] = ::CORBA::Double ();
    }
}

ACE_INLINE
Test::ArrayDouble_slice *
TAO::Array_Traits<Test::ArrayDouble_forany>::alloc (void)
{
  return Test::ArrayDouble_alloc ();
}


// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\array_ci.cpp:150

ACE_INLINE
void
TAO::Array_Traits<Test::ArrayLongDouble_forany>::free (
    Test::ArrayLongDouble_slice * _tao_slice
  )
{
  Test::ArrayLongDouble_free (_tao_slice);
}

ACE_INLINE
Test::ArrayLongDouble_slice *
TAO::Array_Traits<Test::ArrayLongDouble_forany>::dup (
    const Test::ArrayLongDouble_slice * _tao_slice
  )
{
  return Test::ArrayLongDouble_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<Test::ArrayLongDouble_forany>::copy (
    Test::ArrayLongDouble_slice * _tao_to,
    const Test::ArrayLongDouble_slice * _tao_from
  )
{
  Test::ArrayLongDouble_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<Test::ArrayLongDouble_forany>::zero (
    Test::ArrayLongDouble_slice * _tao_slice
  )
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 5; ++i0)
    {
      _tao_slice[i0] = ::CORBA::LongDouble ();
    }
}

ACE_INLINE
Test::ArrayLongDouble_slice *
TAO::Array_Traits<Test::ArrayLongDouble_forany>::alloc (void)
{
  return Test::ArrayLongDouble_alloc ();
}


// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\array_ci.cpp:150

ACE_INLINE
void
TAO::Array_Traits<Test::MultiArrayFloat_forany>::free (
    Test::MultiArrayFloat_slice * _tao_slice
  )
{
  Test::MultiArrayFloat_free (_tao_slice);
}

ACE_INLINE
Test::MultiArrayFloat_slice *
TAO::Array_Traits<Test::MultiArrayFloat_forany>::dup (
    const Test::MultiArrayFloat_slice * _tao_slice
  )
{
  return Test::MultiArrayFloat_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<Test::MultiArrayFloat_forany>::copy (
    Test::MultiArrayFloat_slice * _tao_to,
    const Test::MultiArrayFloat_slice * _tao_from
  )
{
  Test::MultiArrayFloat_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<Test::MultiArrayFloat_forany>::zero (
    Test::MultiArrayFloat_slice * _tao_slice
  )
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 3; ++i0)
    {
      for ( ::CORBA::ULong i1 = 0; i1 < 4; ++i1)
        {
          for ( ::CORBA::ULong i2 = 0; i2 < 2; ++i2)
            {
              _tao_slice[i0][i1][i2] = ::CORBA::Float ();
            }
        }
    }
}

ACE_INLINE
Test::MultiArrayFloat_slice *
TAO::Array_Traits<Test::MultiArrayFloat_forany>::alloc (void)
{
  return Test::MultiArrayFloat_alloc ();
}


// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\array_ci.cpp:150

ACE_INLINE
void
TAO::Array_Traits<Test::MultiArrayDouble_forany>::free (
    Test::MultiArrayDouble_slice * _tao_slice
  )
{
  Test::MultiArrayDouble_free (_tao_slice);
}

ACE_INLINE
Test::MultiArrayDouble_slice *
TAO::Array_Traits<Test::MultiArrayDouble_forany>::dup (
    const Test::MultiArrayDouble_slice * _tao_slice
  )
{
  return Test::MultiArrayDouble_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<Test::MultiArrayDouble_forany>::copy (
    Test::MultiArrayDouble_slice * _tao_to,
    const Test::MultiArrayDouble_slice * _tao_from
  )
{
  Test::MultiArrayDouble_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<Test::MultiArrayDouble_forany>::zero (
    Test::MultiArrayDouble_slice * _tao_slice
  )
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 3; ++i0)
    {
      for ( ::CORBA::ULong i1 = 0; i1 < 4; ++i1)
        {
          for ( ::CORBA::ULong i2 = 0; i2 < 2; ++i2)
            {
              _tao_slice[i0][i1][i2] = ::CORBA::Double ();
            }
        }
    }
}

ACE_INLINE
Test::MultiArrayDouble_slice *
TAO::Array_Traits<Test::MultiArrayDouble_forany>::alloc (void)
{
  return Test::MultiArrayDouble_alloc ();
}


// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\array_ci.cpp:150

ACE_INLINE
void
TAO::Array_Traits<Test::MultiArrayLongDouble_forany>::free (
    Test::MultiArrayLongDouble_slice * _tao_slice
  )
{
  Test::MultiArrayLongDouble_free (_tao_slice);
}

ACE_INLINE
Test::MultiArrayLongDouble_slice *
TAO::Array_Traits<Test::MultiArrayLongDouble_forany>::dup (
    const Test::MultiArrayLongDouble_slice * _tao_slice
  )
{
  return Test::MultiArrayLongDouble_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<Test::MultiArrayLongDouble_forany>::copy (
    Test::MultiArrayLongDouble_slice * _tao_to,
    const Test::MultiArrayLongDouble_slice * _tao_from
  )
{
  Test::MultiArrayLongDouble_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<Test::MultiArrayLongDouble_forany>::zero (
    Test::MultiArrayLongDouble_slice * _tao_slice
  )
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 3; ++i0)
    {
      for ( ::CORBA::ULong i1 = 0; i1 < 4; ++i1)
        {
          for ( ::CORBA::ULong i2 = 0; i2 < 2; ++i2)
            {
              _tao_slice[i0][i1][i2] = ::CORBA::LongDouble ();
            }
        }
    }
}

ACE_INLINE
Test::MultiArrayLongDouble_slice *
TAO::Array_Traits<Test::MultiArrayLongDouble_forany>::alloc (void)
{
  return Test::MultiArrayLongDouble_alloc ();
}


// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\array_ci.cpp:150

ACE_INLINE
void
TAO::Array_Traits<Test::ArrayChar_forany>::free (
    Test::ArrayChar_slice * _tao_slice
  )
{
  Test::ArrayChar_free (_tao_slice);
}

ACE_INLINE
Test::ArrayChar_slice *
TAO::Array_Traits<Test::ArrayChar_forany>::dup (
    const Test::ArrayChar_slice * _tao_slice
  )
{
  return Test::ArrayChar_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<Test::ArrayChar_forany>::copy (
    Test::ArrayChar_slice * _tao_to,
    const Test::ArrayChar_slice * _tao_from
  )
{
  Test::ArrayChar_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<Test::ArrayChar_forany>::zero (
    Test::ArrayChar_slice * _tao_slice
  )
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 5; ++i0)
    {
      _tao_slice[i0] = ::CORBA::Char ();
    }
}

ACE_INLINE
Test::ArrayChar_slice *
TAO::Array_Traits<Test::ArrayChar_forany>::alloc (void)
{
  return Test::ArrayChar_alloc ();
}


// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\array_ci.cpp:150

ACE_INLINE
void
TAO::Array_Traits<Test::ArrayWChar_forany>::free (
    Test::ArrayWChar_slice * _tao_slice
  )
{
  Test::ArrayWChar_free (_tao_slice);
}

ACE_INLINE
Test::ArrayWChar_slice *
TAO::Array_Traits<Test::ArrayWChar_forany>::dup (
    const Test::ArrayWChar_slice * _tao_slice
  )
{
  return Test::ArrayWChar_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<Test::ArrayWChar_forany>::copy (
    Test::ArrayWChar_slice * _tao_to,
    const Test::ArrayWChar_slice * _tao_from
  )
{
  Test::ArrayWChar_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<Test::ArrayWChar_forany>::zero (
    Test::ArrayWChar_slice * _tao_slice
  )
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 5; ++i0)
    {
      _tao_slice[i0] = ::CORBA::WChar ();
    }
}

ACE_INLINE
Test::ArrayWChar_slice *
TAO::Array_Traits<Test::ArrayWChar_forany>::alloc (void)
{
  return Test::ArrayWChar_alloc ();
}


// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\array_ci.cpp:150

ACE_INLINE
void
TAO::Array_Traits<Test::MultiArrayChar_forany>::free (
    Test::MultiArrayChar_slice * _tao_slice
  )
{
  Test::MultiArrayChar_free (_tao_slice);
}

ACE_INLINE
Test::MultiArrayChar_slice *
TAO::Array_Traits<Test::MultiArrayChar_forany>::dup (
    const Test::MultiArrayChar_slice * _tao_slice
  )
{
  return Test::MultiArrayChar_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<Test::MultiArrayChar_forany>::copy (
    Test::MultiArrayChar_slice * _tao_to,
    const Test::MultiArrayChar_slice * _tao_from
  )
{
  Test::MultiArrayChar_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<Test::MultiArrayChar_forany>::zero (
    Test::MultiArrayChar_slice * _tao_slice
  )
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 3; ++i0)
    {
      for ( ::CORBA::ULong i1 = 0; i1 < 4; ++i1)
        {
          for ( ::CORBA::ULong i2 = 0; i2 < 2; ++i2)
            {
              _tao_slice[i0][i1][i2] = ::CORBA::Char ();
            }
        }
    }
}

ACE_INLINE
Test::MultiArrayChar_slice *
TAO::Array_Traits<Test::MultiArrayChar_forany>::alloc (void)
{
  return Test::MultiArrayChar_alloc ();
}


// TAO_IDL - Generated from
// e:\projects\opendds\ext\opendds\ace_wrappers\tao\tao_idl\be\be_visitor_array\array_ci.cpp:150

ACE_INLINE
void
TAO::Array_Traits<Test::MultiArrayWChar_forany>::free (
    Test::MultiArrayWChar_slice * _tao_slice
  )
{
  Test::MultiArrayWChar_free (_tao_slice);
}

ACE_INLINE
Test::MultiArrayWChar_slice *
TAO::Array_Traits<Test::MultiArrayWChar_forany>::dup (
    const Test::MultiArrayWChar_slice * _tao_slice
  )
{
  return Test::MultiArrayWChar_dup (_tao_slice);
}

ACE_INLINE
void
TAO::Array_Traits<Test::MultiArrayWChar_forany>::copy (
    Test::MultiArrayWChar_slice * _tao_to,
    const Test::MultiArrayWChar_slice * _tao_from
  )
{
  Test::MultiArrayWChar_copy (_tao_to, _tao_from);
}

ACE_INLINE
void
TAO::Array_Traits<Test::MultiArrayWChar_forany>::zero (
    Test::MultiArrayWChar_slice * _tao_slice
  )
{
  // Zero each individual element.
  for ( ::CORBA::ULong i0 = 0; i0 < 3; ++i0)
    {
      for ( ::CORBA::ULong i1 = 0; i1 < 4; ++i1)
        {
          for ( ::CORBA::ULong i2 = 0; i2 < 2; ++i2)
            {
              _tao_slice[i0][i1][i2] = ::CORBA::WChar ();
            }
        }
    }
}

ACE_INLINE
Test::MultiArrayWChar_slice *
TAO::Array_Traits<Test::MultiArrayWChar_forany>::alloc (void)
{
  return Test::MultiArrayWChar_alloc ();
}


